<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/@mdi/font@4.x/css/materialdesignicons.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css" rel="stylesheet">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
  <style>
    a {
      text-decoration: none;
      color: unset;
    }
    a:visited {
      color: unset;
    }
  </style>
  <title>Waifus List bot</title>
</head>
<body>
  <div id="app">
    <v-app>
      <v-main>
        <v-app-bar
          color="primary"
          dark
        >
          <v-toolbar-title>
            <a href="/"  style="color: #FAFAFA">
              Waifu List Api
            </a>
          </v-toolbar-title>

          <v-spacer></v-spacer>

          <a href="/add-waifu">
            <v-btn text>
              Add waifus
            </v-btn>
          </a>

          <a href="/add-franchise">
            <v-btn text>
              add franchise
            </v-btn>
          </a>
        </v-app-bar>

        <v-container>
          {{{ body }}}
        </v-container>
      </v-main>
    </v-app>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js"></script>
  <script>
    new Vue({
      el: '#app',
      vuetify: new Vuetify(),
      data() {
        return {
          user: '',
          pass: '',
          showPass: false,
          repitPass: '',
          searcjWaifuName: null,
          searchFranchiseName: null,
          isLoading: false,
          search: null,
          franchise: {},
          franchises: [],
          timeOut: null
        }
      },
      watch: {
        searchFranchiseName (val) {
          if (val != null) this.tab = 0
          else this.tab = null
        },
        search (val) {
          clearTimeout(this.timeOut);
          if (this.franchises.length > 0) return;

          this.isLoading = true;
          this.timeOut = setTimeout(() => this.searchFranchise(val), 700);
        }
      },
      methods: {
        async searchFranchise(text) {
          console.log('buscar por', text)
          const response = await fetch(`http://localhost:3000/search-franchise?text=${text}`)
          .then(res => res.clone().json())
          .then(res => {
            console.log(res);
            this.franchises = res;
          })
          .catch(err => {
            console.log(err);
          })
          .finally(() => (this.isLoading = false))
        }
      }
    })
  </script>
</body>
</html>